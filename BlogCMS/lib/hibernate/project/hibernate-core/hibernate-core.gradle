apply plugin: 'antlr'
apply plugin: 'hibernate-matrix-testing'

apply plugin: 'version-injection'

versionInjection {
    into( 'org.hibernate.Version', 'getVersionString' )
}

dependencies {
    compile( libraries.jta )
    compile( libraries.dom4j )
    compile( libraries.commons_annotations )
    compile( libraries.jpa )
    compile( libraries.javassist )
    compile( libraries.antlr )
    compile( libraries.jandex )

    antlr( libraries.antlr )

    provided( libraries.ant )
    provided( libraries.jacc )
    provided( libraries.validation )
    provided( libraries.classmate )

    testCompile( project(':hibernate-testing') )
    testCompile( libraries.validation )
    testCompile( libraries.jandex )
    testCompile( libraries.classmate )
    testCompile( libraries.mockito )
    testCompile( libraries.validator ) {
        // for test runtime
        transitive = true
    }
    // for testing stored procedure support
    testCompile( libraries.derby )


    testRuntime( 'jaxen:jaxen:1.1' )
    testRuntime( libraries.javassist )
    testRuntime( libraries.unified_el )
}

def pomName() {
    return 'Core Hibernate O/RM functionality'
}

def pomDescription() {
    return 'The core O/RM functionality as provided by Hibernate'
}

def osgiDescription() {
	return pomDescription()
}

jar {
    manifest {
        mainAttributes( 'Main-Class': 'org.hibernate.Version' )

        instructionFirst 'Import-Package',
            'javax.security.auth;resolution:=optional',
            'javax.security.jacc;resolution:=optional',
            'javax.validation;resolution:=optional',
            'javax.validation.constraints;resolution:=optional',
            'javax.validation.groups;resolution:=optional',
            'javax.validation.metadata;resolution:=optional',
            // TODO: Shouldn't have to explicitly list this, but the plugin
            // generates it with a [1.0,2) version.
            'javax.persistence;version="2.1.0"',
            // Temporarily support JTA 1.1 -- Karaf and other frameworks still
            // use it.  Without this, the plugin generates [1.2,2).
            // build.gradle adds javax.transaction for all modules
            'javax.transaction.xa;version="[1.1,2)"',
            // optionals
            'javax.management;resolution:=optional',
            'javax.naming.event;resolution:=optional',
            'javax.naming.spi;resolution:=optional',
            'org.apache.tools.ant;resolution:=optional',
			'org.apache.tools.ant.taskdefs;resolution:=optional',
			'org.apache.tools.ant.types;resolution:=optional'

//        // TODO: Uncomment once EntityManagerFactoryBuilderImpl no longer
//        // uses ClassLoaderServiceImpl.
//        instruction 'Export-Package',
//            'org.hibernate.boot.registry.classloading.internal',
//            '*'
    }
}

ext {
	jaxbTargetDir = file( "${buildDir}/generated-src/jaxb/main" )
}

sourceSets.main {
    java.srcDir jaxbTargetDir
}

// resources inherently exclude sources
sourceSets.test.resources {
    setSrcDirs( ['src/test/java','src/test/resources'] )
}

idea {
	module {
		sourceDirs += file( "${buildDir}/generated-src/antlr/main" )
	}
}

task jaxb {
	ext {
        // input schemas
        cfgXsd = file( 'src/main/resources/org/hibernate/hibernate-configuration-4.0.xsd')
        hbmXsd = file( 'src/main/resources/org/hibernate/hibernate-mapping-4.0.xsd' )
        ormXsd = file( 'src/main/resources/org/hibernate/jpa/orm_2_0.xsd' )

        // input bindings
        cfgXjb = file( 'src/main/xjb/hbm-configuration-bindings.xjb' )
        hbmXjb = file( 'src/main/xjb/hbm-mapping-bindings.xjb' )
        ormXjb = file( 'src/main/xjb/orm-bindings.xjb' )
    }

    // configure Gradle up-to-date checking
    inputs.files( [cfgXsd, hbmXsd, ormXsd, cfgXjb, hbmXjb, ormXjb] )
    outputs.dir( jaxbTargetDir )

    // perform actions
    doLast {
        jaxbTargetDir.mkdirs()

        ant.taskdef(name: 'xjc', classname: 'org.jvnet.jaxb2_commons.xjc.XJC2Task', classpath: configurations.jaxb.asPath)
        ant.jaxbTargetDir = jaxbTargetDir

        // hibernate-configuration
        ant.xjc(
                destdir: '${jaxbTargetDir}',
                package: 'org.hibernate.internal.jaxb.cfg',
                binding: 'src/main/xjb/hbm-configuration-bindings.xjb',
                schema: cfgXsd.path
        )

        // hibernate-mapping
        ant.xjc(
                destdir: '${jaxbTargetDir}',
                package: 'org.hibernate.internal.jaxb.mapping.hbm',
                binding: hbmXjb.path,
                schema: hbmXsd.path,
                extension: 'true'
        ) {
            arg line:     '-Xinheritance'
        }

        // orm.xml (jpa)
        ant.xjc(
                destdir: '${jaxbTargetDir}',
                package: 'org.hibernate.internal.jaxb.mapping.orm',
                binding: 'src/main/xjb/orm-bindings.xjb',
                schema: ormXsd.path
        )
    }

}

runSourceGenerators.dependsOn jaxb
runSourceGenerators.dependsOn generateGrammarSource

